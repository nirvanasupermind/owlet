//Lexical grammar (tokens)
%lex

%%

\s+ /* skip whitespace */

\<(.|\,\s*)*\> return 'TUPLE'

\"[^"]*\" return 'STRING'

\d+\b(?!\.)|\b0[zZ][01N]+\b return 'INT'

[+-]?([0-9]*[.])[0-9]+ return 'FLOAT'

[\w\-+*=/&\|\^!<>]+ return 'SYMBOL' 

\{((.+?):(.+?))*\}|/\{([^:]|\,\s*)*\} return 'TABLE'

/lex

%%

Exp
    : Atom
    | List
    ;
    
Atom 
    : INT {
        const modules = require('../modules.js');
        const BigInteger = require('big-integer')
        if($1.slice(0,2) === "0z") {
            $$ = new modules.int._Int($1.slice(2))
        } else {
        $$ = new modules.int._Int(modules.int._Int.bigToBT(BigInteger($1)))
        }
    }
    | FLOAT {
        const modules = require('../modules.js');
        $$ = new modules.float._Float(parseFloat($1));
    }
    | STRING {
        const modules = require('../modules.js');
        $$ = new modules.string._String(modules.string.unicodeEscape($1.slice(1,-1)))
    }
    | TABLE
    | TUPLE
    | SYMBOL 
    ;

List
    : '(' ListEntries ')'       { $$ = $2 }
    ;




ListEntries
    : ListEntries Exp   { $1.push($2); $$ = $1}
    | /* empty */       { $$ = [] }
    ;
