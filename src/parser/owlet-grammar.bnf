//Lexical grammar (tokens)
%lex

%%

\s+ /* skip whitespace */

\"[^"]*\" return 'STRING'

\d+\b(?!\.)|\b0[zZ][01N]+\b return 'INT'

[+-]?([0-9]*[.])[0-9]+ return 'FLOAT'

[\w\-+*=<>/&\|\^!]+  return 'SYMBOL' 

\{((.+?):(.+?))*\}|/\{([^:]|\,\s*)*\} return 'TABLE'

/lex

%%

Exp
    : Atom
    | List
    ;
    
Atom 
    : INT {
        const modules = require('../modules.js');
        const BigInteger = require('big-integer')
        if($1.slice(0,2) === "0z") {
            $$ = new modules.int._Int($1.slice(2))
        } else {
        $$ = new modules.int._Int(modules.int._Int.bigToBT(BigInteger($1)))
        }
    }
    | FLOAT {
        const modules = require('../modules.js');
        $$ = new modules.float._Float(parseFloat($1));
    }
    | STRING {
        const modules = require('../modules.js');
        $$ = new modules.string._String(modules.string.unicodeEscape($1.slice(1,-1)))
    }
    | TABLE {
        const modules =  require('../modules.js');
        function toTernary(a) {
     
            if (typeof a === "number") {
                if (a % 1 === 0) {
                    return new modules.int._Int(modules.int._Int.convertToBT(a));
                }
                return new modules.float._Float(parseFloat(a));
            } else if (typeof a === "boolean") {
                return new modules.trit._Trit(a);
            } else if (a.constructor.name === "Object" || a.constructor.name === "Array") {
                var b = {};
                for(var i = 0; i < Object.keys(a).length; i++) {
                    b[toTernary(Object.keys(a)[i])] = toTernary(a[Object.keys(a)[i]]);
                }
                return modules.table._Table.from(b);
            } else if(typeof a === "string") {
                return new modules.string._String(a._toString());
            }
            return new modules.string._String(a._toString());
        }
        

        for(var i = 0; i < 50; i++) {
           $1 = $1.replace(/\{[^:]+\}/g,function(x){ 
               return '['+x.slice(1,-1)+']';
           })
        }

        for(var i = 0; i < 50; i++) {
        $1 = $1.replace(/\[(.*?)\}|\{(.*?)\]/g,function (x) {
            return '['+x.slice(1,-1)+']';
        })
        }

        $$ = toTernary(JSON.parse($1));

            

        }
    
    | SYMBOL
    ;

List
    : '(' ListEntries ')'       { $$ = $2 }
    ;

ListEntries
    : ListEntries Exp   { $1.push($2); $$ = $1}
    | /* empty */       { $$ = [] }
    ;