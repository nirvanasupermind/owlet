/*
This program creates a class called Complex, which represents a complex number. 
They support addition, subtraction, multiplication, division, and square root.
*/
(begin
    (class Complex null (begin
        (def constructor (this a b) (begin
            (set (prop this "a") a)
            (set (prop this "b") b)
            (set (prop this "add") (lambda (that) (begin
                (local _a (prop this "a"))
                (local _b (prop this "b"))
                (local _c (prop that "a"))
                (local _d (prop that "b"))
                (new Complex (+ _a _c) (+ _b _d))
            )))
            (set (prop this "sub") (lambda (that) (begin
                (local _a (prop this "a"))
                (local _b (prop this "b"))
                (local _c (prop that "a"))
                (local _d (prop that "b"))
                (new Complex (- _a _c) (- _b _d))
            )))
            (set (prop this "mul") (lambda (that) (begin
                (local _a (prop this "a"))
                (local _b (prop this "b"))
                (local _c (prop that "a"))
                (local _d (prop that "b"))
                (new Complex (- (* _a _c) (* _b _d)) (+ (* _a _d) (* _b _c)))
            )))
        ))
        
        (def toString (x) (begin
            (local result "")
            (set result (+ result (string (prop x "a"))))
            (set result (+ result "+"))
            (set result (+ result (string (prop x "b"))))
            (set result (+ result "i"))
            result
        ))
    ))


    (local x (new Complex 0.0 1.0))
    (local y (new Complex 0.0 1.0))
    (print (trit -1))
)